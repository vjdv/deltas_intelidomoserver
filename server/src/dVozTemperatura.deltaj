delta dVozTemperatura {
	modifies modelos.Casa{
		adds import modelos.voz.TemperaturaLink;
		adds import modelos.voz.TemperaturasLink;
		modifies constructor(){
			original();
			TemperaturasLink f = new TemperaturasLink(mapaTemperatura);
			voz.addComando("temperatura promedio",f);
		}
		modifies registrarSensorTemperatura(SensorTemperatura st){
			original(st);
			TemperaturaLink f = new TemperaturaLink(st);
			voz.addComando("temperatura "+st.getId(),f);
			voz.addComando("temperatura "+TextCommands.number2str(st.getId()),f);
		}
	}
	adds{
		package modelos.voz;
		import java.util.*;
		import modelos.SensorTemperatura;
		import intelidomo.estatico.Constantes;
		public class TemperaturaLink implements ChainLink{
			private final SensorTemperatura st;
			public TemperaturaLink(SensorTemperatura st){
				this.st = st;
			}
			@Override
			public String atender(List<String> words){
				if(st.getEstado().equals(Constantes.INDISPONIBLE)) return "Dispositivo no disponible";
				else{
					float val = st.getTemperatura();
					String consideracion = "muy frío";
					if(val>35f) consideracion = "demasiado caliente";
					else if(val>30f) consideracion = "muy cálido";
					else if(val>27f) consideracion = "cálido";
					else if(val>20f) consideracion = "adecuado";
					else if(val>16f) consideracion = "frío";
					return "La temperatura es de "+st.getEstado()+"°C, se considera "+consideracion+".";
				}
			}
			@Override
			public void addLink(List<String> words, ChainLink node){
				throw new UnsupportedOperationException();
			}
		}
	}
	adds{
		package modelos.voz;
		import java.util.*;
		import java.text.DecimalFormat;
		import modelos.SensorTemperatura;
		import intelidomo.estatico.Constantes;
		public class TemperaturasLink implements ChainLink{
			private final DecimalFormat decimal = new DecimalFormat("#.#");
			private final Map<Integer,SensorTemperatura> st_map;
			public TemperaturasLink(Map<Integer,SensorTemperatura> stm){
				st_map = stm;
			}
			@Override
			public String atender(List<String> words){
				if(st_map.size()==0) return "No hay sensores de temperatura registrados.";
				int i=0;
				float v=0;
				for(SensorTemperatura st : st_map.values()){
					if(st.getEstado().equals(Constantes.INDISPONIBLE)) break;
					v += st.getTemperatura();
					i++;
				}
				if(i==0) return "No hay sensores de temperatura disponibles.";
				float val = v/i;
				String consideracion = "muy frío";
				if(val>35f) consideracion = "demasiado caliente";
				else if(val>30f) consideracion = "muy cálido";
				else if(val>27f) consideracion = "cálido";
				else if(val>20f) consideracion = "adecuado";
				else if(val>16f) consideracion = "frío";
				return "La temperatura promedio es de "+decimal.format(val)+"°C, se considera "+consideracion+".";
			}
			@Override
			public void addLink(List<String> words, ChainLink node){
				throw new UnsupportedOperationException();
			}
		}
	}
}