delta dDomopi {
	adds{
		package modelos.domopi;
		import intelidomo.estatico.Constantes;
		import modelos.Controlador;
		import modelos.Dispositivo;
		import modelos.Casa;
		import java.io.*;
		import java.net.*;
		import java.util.*;
		import java.util.logging.*;
		public class Domopi extends Controlador{
			private List<Dispositivo> dispositivos = new ArrayList<Dispositivo>();
			private Casa casa = Casa.getInstancia();
			private Conexion conn;
			
			public Domopi(){
				setTipo("Domopi Controller");
			}
			public void constructor(){
				conectar();
			}
			@Override
			public void conectar(){
				conn = new Conexion();
				new Thread(conn).start();
			}
			private void entenderCadena(String str){
				String lkey = "";
				str = str.trim();
				str = str.replaceAll("#","");
				String pedazos[] = str.split("\\|");
				if(pedazos.length==0 || pedazos.length%2==1) return;
				for(int i=0;i<pedazos.length;i+=2){
					String key = pedazos[i];
					String val = pedazos[i+1];
					if(!key.equals("$E")) lkey = key;
					if(key.equals("$E") && !val.equals("1")) entenderPedazo(lkey,""+Constantes.INDISPONIBLE);
					else entenderPedazo(key,val);
				}
				if(hayCambios()) notificarObs();
			}
			private void entenderPedazo(String key,String val){}
			public void enviarComando(String cmd){
				conn.out.println(cmd);
			}
			public void setIndisponibles(){
				for(Dispositivo d : dispositivos) d.setEstado(Constantes.INDISPONIBLE);
				if(hayCambios()) notificarObs();
			}
			public class Conexion implements Runnable{
				String comando;
				Socket socket;
				PrintWriter out;
				BufferedReader in;
				private long tiempo_reconn = 10000;
				private int intentos_reconn = 0;
				@Override
				public synchronized void run(){
					try{
						socket = new Socket(getIP(),getPuertoInt());
						out = new PrintWriter(socket.getOutputStream(),true);
						in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					}catch(UnknownHostException ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"DomoPi: No se encontró dispositivo " + getIP());
						desconectar();
						esperarConexion();
						return;
					}catch(IOException ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"DomoPi: No se conectó con dispositivo " + getIP());
						desconectar();
						esperarConexion();
						return;
					}
					try{
						intentos_reconn = 0;
						out.println("GET ALL");
						out.flush();
						String cadena;
						while((cadena = in.readLine()) != null) {
							if(!cadena.equals("")) entenderCadena(cadena);
						}
					}catch(IOException ex){
						Logger.getLogger("DomoLog").log(Level.SEVERE,"DomoPi: Se perdió conexión con dispositivo " + getIP());
					}
					desconectar();
					esperarConexion();
				}
				private void esperarConexion(){
					intentos_reconn++;
					if(intentos_reconn>=10) tiempo_reconn = 60000;
					else if(intentos_reconn>=3) tiempo_reconn = 30000;
					else tiempo_reconn = 10000;
					try{
						Logger.getLogger("DomoLog").log(Level.INFO, "DomoPi: Intento de conexión #"+intentos_reconn+" con dispositivo " + getIP() +" en "+tiempo_reconn+"ms");
						Thread.sleep(tiempo_reconn);
					}catch(InterruptedException ex){
						Logger.getLogger("DomoLog").log(Level.SEVERE,"DomoPi: No fue posible esperar por reconexión",ex);
					}
					conectar();
				}
				public void desconectar(){
					if(socket==null) return;
					try{
						setIndisponibles();
						out.close();
						in.close();
						socket.close();
						socket = null;
					}catch(IOException ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"DomoPi: Error al cerrar conexión abierta de dispositivo " + getIP(),ex);
					}
				}
			}
		}
	}
	modifies db.Gestor{
		adds import modelos.domopi.Domopi;
		modifies despacharControlador(String tipo,ResultSet rs){
			if(tipo.equals("Domopi")){
				Domopi dodisp = new Domopi();
				dodisp.setId(rs.getInt("id_disp"));
				dodisp.setArea(rs.getInt("id_area"));
				dodisp.setIP(rs.getString("ip"));
				dodisp.setPuerto(rs.getString("puerto"));
				dodisp.constructor();
				return dodisp;
			}
			return original(tipo,rs);
		}
	}
}