delta dRodas {
	adds{
		package modelos.rodas;
		import intelidomo.estatico.Constantes;
		import modelos.Controlador;
		import modelos.Casa;
		import java.io.*;
		import java.net.*;
//		import java.util.*;
		import java.util.logging.*;
		public class ArduinoRodas extends Controlador {
			public ArduinoRodas(){
				setTipo("Arduino Rodas v1.0");
			}
			public void constructor(){
				conectar();
				new Thread(new EnviarComando("GET /Test$")).start();
			}
			@Override
			public void conectar(){}
			public void enviarComando(String cmd){
				new Thread(new EnviarComando(cmd)).start();
			}
			private void entenderCadena(String str){
				String lkey = "";
				str = str.trim();
				str = str.replaceAll("#","");
				String pedazos[] = str.split("\\|");
				if(pedazos.length==0 || pedazos.length%2==1) return;
				for(int i=0;i<pedazos.length;i+=2){
					String key = pedazos[i];
					String val = pedazos[i+1];
					if(!key.equals("$E")) lkey = key;
					if(key.equals("$E") && !val.equals("1")) entenderPedazo(lkey,""+Constantes.INDISPONIBLE);
					else entenderPedazo(key,val);
				}
				if(hayCambios()) notificarObs();
			}
			private void entenderPedazo(String key,String val){}
			class EnviarComando implements Runnable{
				String comando;
				Socket socket;
				PrintWriter out;
				BufferedReader in;
				public EnviarComando(String cmd){
					comando = cmd;
				}
				@Override
				public synchronized void run(){
					try{
						socket = new Socket(getIP(),85);
						socket.setSoTimeout(10000);
						out = new PrintWriter(socket.getOutputStream(),true);
						in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					}catch(Exception ex) {
						String params[] = {getIP(),ex.getMessage()};
						Logger.getLogger("DomoLog").log(Level.WARNING,"ArduinoRodas: Error IO con {0} por {1}", params);
						marcarIndisponibles();
						return;
					}
					try{
						out.print(comando);
						out.flush();
						int iii;
						String cadena = "";
						boolean primero = true;
						while((iii = in.read()) != - 1) {
							char c = ( char ) iii;
							if(c == '#') {
								if(primero) primero = false;
								else{
									entenderCadena(cadena);
									break;
								}
							}
							else cadena += c;
						}
						Logger.getLogger("DomoLog").log(Level.FINER,"Respuesta desde " + getIP()+": "+cadena);
					}catch(Exception ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"ArduinoRodas: Error en dispositivo " + getIP(),ex);
						marcarIndisponibles();
					}
					try{
						out.close();
						in.close();
						socket.close();
					}catch(Exception ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"ArduinoRodas: Error conexión por {0}",ex.getMessage());
						marcarIndisponibles();
					}
				}
				
			}
			class KeepUpdated implements Runnable{
				private final String comando;
				private final long tiempo;
				public KeepUpdated(String cmd, long tmr){
					comando = cmd;
					tiempo = tmr;
				}
				@Override
				public void run(){
					try{
						while(true){
							new EnviarComando(comando).run();
							Thread.sleep(tiempo);
						}
					}catch(InterruptedException ex){
						Logger.getLogger("DomoLog").log(Level.WARNING,"Error interrupción en {0}",getIP());
					}
				}
			}
		}
	}
	modifies db.Gestor{
		adds import modelos.rodas.ArduinoRodas;
		modifies despacharControlador(String tipo,ResultSet rs){
			if(tipo.equals("ArduinoRodas")){
				ArduinoRodas ardisp = new ArduinoRodas();
				ardisp.setId(rs.getInt("id_disp"));
				ardisp.setArea(rs.getInt("id_area"));
				ardisp.setIP(rs.getString("ip"));
				ardisp.setPuerto(rs.getString("puerto"));
				ardisp.constructor();
				return ardisp;
			}
			return original(tipo,rs);
		}
	}
}