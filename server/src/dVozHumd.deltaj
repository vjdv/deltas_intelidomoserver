delta dVozHumd {
	modifies modelos.Casa{
		adds import modelos.voz.HumedadLink;
		modifies registrarSensorHumedad(SensorHumedad sh){
			original(sh);
			HumedadLink f = new HumedadLink(sh);
			voz.addComando("humedad "+sh.getId(),f);
			voz.addComando("humedad "+TextCommands.number2str(sh.getId()),f);
		}
	}
	adds{
		package modelos.voz;
		import java.util.*;
		import modelos.SensorHumedad;
		import intelidomo.estatico.Constantes;
		public class HumedadLink implements ChainLink{
			private final SensorHumedad sh;
			public HumedadLink(SensorHumedad sh){
				this.sh = sh;
			}
			@Override
			public String atender(List<String> words){
				if(sh.getEstado().equals(Constantes.INDISPONIBLE)) return "Dispositivo no disponible";
				else{
					float val = sh.getHumedad();
					String consideracion = "estÃ¡ debajo de lo recomendado";
					if(val>80f) consideracion = "se considera un nivel muy alto";
					else if(val>70f) consideracion = "por arriba de lo recomendado";
					else if(val>30f) consideracion = "es adecuado";
					return "La humedad relativa es de "+sh.getEstado()+"%, "+consideracion+".";
				}
			}
			@Override
			public void addLink(List<String> words, ChainLink node){
				throw new UnsupportedOperationException();
			}
		}
	}
}